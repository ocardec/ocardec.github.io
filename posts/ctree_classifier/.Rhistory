install.packages("tidyverse")
install.packages("pca3d")
library(pca3d)
# install.packages("tidyverse")
# install.packages("arules")
# install.packages("hrbrthemes")
# install.packages("party")
# install.packages("readxl")
install.packages("pca3d")
library(pca3d)
library(pca3d)
install.packages("pca3d", dependencies = FALSE)
library(pca3d)
# install.packages("tidyverse")
# install.packages("arules")
# install.packages("hrbrthemes")
# install.packages("party")
# install.packages("readxl")
install.packages("pca3d")
library(pca3d)
library(pca3d)
install.packages("PCADSC", dependencies = FALSE)
library(PCADSC)
install.packages("ldamatch", dependencies = FALSE)
# library("ggord")
# library("devtools")
library(ldamatch)
getOption("repos")
packageDescription("ldamatch")
gc()
install.packages("LDAvis")
library(LDAvis)
packageDescription("LDAvis")
# library("ggord")how
# library("devtools")
library(ldamatch)
library(ldamatch)
install.packages(c("nlme", "roxygen2", "survival"))
library(knitr)
library(ldamatch)
library(LDAvis)
detach("package:ldamatch", unload = TRUE)
remove.packages("ldamatch")
library(e1071)
detach("package:LDAvis", unload = TRUE)
library(LDAvis)
library(lda)
detach("package:lda", unload = TRUE)
detach("package:LDAvis", unload = TRUE)
library(MASS)
detach("package:MASS", unload = TRUE)
library(tidyverse)
install.packages(c("brew", "broom", "caret", "corrplot", "data.table", "dplyr", "e1071", "knitr", "lubridate", "magrittr", "plotly", "pROC", "purrr", "randomForest", "RColorBrewer", "readr", "readxl", "reticulate", "rio", "shiny", "stringi", "stringr", "tibble", "tidyr", "tidyselect", "tidytext", "tidyverse", "tm"))
clear
clean
clean()
clear()
- import string
knit_with_parameters("~/Documents/GitHub/ocardec.github.io/books/Books.Rmd")
rm(list = ls())
# Requirements ####
# if(!require("pacman")) install.packages("pacman")
pacman::p_load(pacman, tidyverse, ggraph, igraph, RColorBrewer)
# Requirements ####
if(!require("pacman")) install.packages("pacman")
pacman::p_load(pacman, tidyverse, ggraph, igraph, RColorBrewer)
theme_set(theme_void())
#| echo: false
#| warning: false
library("tidyverse")
library("party")
library("partykit")
library("graphics")
library("devtools")
library("hrbrthemes")
library("caret")
library("quarto")
df<-as_tibble(read.csv(file="cardiotocography.csv", head=TRUE, sep=",", as.is=FALSE))
setwd("~/Documents/GitHub/ocquarto_portfolio/projects/CTG_Classifications_CTREE")
#| echo: false
#| warning: false
library("tidyverse")
library("party")
library("partykit")
library("graphics")
library("devtools")
library("hrbrthemes")
library("caret")
library("quarto")
df<-as_tibble(read.csv(file="cardiotocography.csv", head=TRUE, sep=",", as.is=FALSE))
#| expandable: true
#| echo: false
options(width=120)
print(df, n=6)
summary(df$LB)
colSums(is.na(df))
hist((df$LB), main = "Histogram of FHR Baseline",
xlab = "(Beats per Min)", border = "darkblue", col = "darkgrey", labels = T)
t.test(df$LB)
# LB stats
m<-mean(df$LB)
std<-sd(df$LB)
upr=m+std
lwr=m-std
lbdf <- data.frame(df,my_x = 0 + rnorm(length(df$LB),
mean=m, sd=std),my_y = 0 + rnorm(length(df$LB), mean=m, sd=std))
# LB Variation
print(pltlb <- ggplot(lbdf, xlab = F, aes(x=(my_x), y=my_y)) +
geom_line(col="grey51",linemitre=1) +
geom_smooth(method=lm , color="blue", lty=3, fill="light blue", se=T) +
labs(x=NULL, y="BPM", title="FHR LB Variation\nIn Relation To The Mean")+
theme_ipsum())
upr2=m+(std*2)
lwr2=m-(std*2)
# Plot LB distribution boundaries
plot.new()
plot(df$LB, type="l", col="grey51", ylab="LB", main="1 & 2 Standard Deviations")
abline(h = m, col = "blue")
abline(h = upr, col = "orange", lty=2)
abline(h = lwr, col = "orange", lty=2)
abline(h = upr2, col = "red", lty=2)
abline(h = lwr2, col = "red", lty=2)
text(-65,134, "mean:133.30", col = "blue", adj = c(0, -.1))
text(-65,upr, round(upr, 2), col = "black", adj = c(0, -.1))
text(-65,lwr, round(lwr, 2), col = "black", adj = c(0, -.1))
text(-65,upr2, round(upr2, 2), col = "black", adj = c(0, -.1))
text(-65,lwr2, round(lwr2, 2), col = "black", adj = c(0, -.1))
# LB Observations higher than 2-s.d.
lba<-(sum(df$LB >152.99)) #39
# LB Observations lower than 2-s.d.
lbb<-(sum(df$LB <113.62)) #44
lba+lbb #=83 obs outside of 2-s.d.
sum(between(df$LB, 113.62, 152.99))/nrow(df) # of obs within 2-s.d.
# b. Exclude non-original measurements, rename targeted values
df[12:22] <- NULL
df$NSP<-as.numeric(df$NSP)
df$NSP<-factor(df$NSP, levels= 1:3, labels = c("Normal","Suspect", "Pathologic"))
# df$CLASS<-as.numeric(df$CLASS)
# df$CLASS<-factor(df$CLASS, levels=1:10, labels= c('A', 'B', 'C', 'D', 'SH', 'AD', 'DE', 'LD', 'FS', 'SP'))
# Visualization of original NSP
plot(df$NSP, main="Original NSP Distribution",
xlab="Fetal State Classification",
ylab="Frequency", col=c(3, 7, 2))
text(df$NSP, labels=as.character(tabulate(df$NSP)), adj=3, pos=3)
# Distributions preview
df[,1:12] %>%
gather() %>%
ggplot(aes(value)) +
theme_light() + labs( title="FHR Measurement Distributions")+
theme(axis.text.x = element_text(angle=90)) +
facet_wrap(~ key, scales = "free", shrink = TRUE) +
geom_bar(mapping = aes(value),
color="darkblue", fill="lightgrey")
summary(df)
#5. Split the data into a training and test set
set.seed(1234)
ind <- sample(2, nrow(df), replace = T, prob = c(0.70, 0.30))
train.data <- df[ind == 1, ]
test.data <- df[ind == 2, ]
#6. Run the method on a training data
myFormula<-NSP~.
model <- ctree(myFormula, data = train.data)
#7. output the tree structure
print(model)
#8. visualize the tree
# plot(model, main="Cardiotocography Data\n Conditional Inference Tree\n'Extended'",
#       type="simple",ep_args = list(justmin = 8), drop_terminal = F,
#      gp = gpar(fontsize = 9), margins = c(4,4, 4, 4))
plot(model, type="extended", ep_args = list(justmin =8), drop_terminal=F, tnex=1.5,
gp=gpar(fontsize = 8, col="dark blue"),
inner_panel = node_inner(model, fill=c("light grey","cyan"), pval=T),
terminal_panel=node_barplot(model, fill=c(3,7,2), beside=T, ymax=1, rot = 75,
just = c(.95,.5), ylines=T, widths = 2, gap=0.05, reverse=F, id=T),
margins = c(5,3, 4, 3),
main ="Cardiotocography Data\n Conditional Inference Tree\n'Extended'")
#9. Confusion matrix
table(predict(model), train.data$NSP, dnn=c("PREDICTED", "ACTUAL"))
# predicted classification accuracy with training data
sum(predict(model) == train.data$NSP)/length(train.data$NSP)
prop.table(table(predict(model), train.data$NSP, dnn=c("PREDICTED", "ACTUAL")))
#10. Evaluate the model on a test data
model2 <- ctree(myFormula, data = test.data)
print(model2)
# plot(model2, main="Cardiotocography Data\n Simple Conditional Inference Tree\nby ocardec",
#      type="simple",ep_args = list(justmin = 10), drop_terminal = F, gp = gpar(fontsize = 12))
plot(model2, ep_args = list(justmin = 10), type="extended", drop_terminal = T,
tnex=2, gp= gpar(fontsize = 8, col="dark blue"),
inner_panel = node_inner (model2, fill=c("lightgrey","yellow"), pval=TRUE, id=TRUE),
terminal_panel=node_barplot(model2, col="black", fill=c(3,7,2, 0.3), beside=TRUE,
ymax=1, rot = 90, just = c("right", "top"), ylines=T,
widths=1, gap=0.1, reverse=FALSE, id=TRUE), margins = c(5, 3, 4, 2),
main="Cardiotocography Data\n Extended Conditional Inference Tree\nby ocardec")
# Confusion matrix and stats
testPred2 <- predict(model2, newdata = test.data, method="NSP")
confusionMatrix(testPred2, test.data$NSP)
#| echo: false
#| warning: false
library("tidyverse")
library("party")
library("partykit")
library("graphics")
library("devtools")
library("hrbrthemes")
library("caret")
library("quarto")
df<-as_tibble(read.csv(file="cardiotocography.csv", head=TRUE, sep=",", as.is=FALSE))
#| expandable: true
#| echo: false
options(width=120)
print(df, n=6)
summary(df$LB)
colSums(is.na(df))
hist((df$LB), main = "Histogram of FHR Baseline",
xlab = "(Beats per Min)", border = "darkblue", col = "darkgrey", labels = T)
t.test(df$LB)
# LB stats
m<-mean(df$LB)
std<-sd(df$LB)
upr=m+std
lwr=m-std
lbdf <- data.frame(df,my_x = 0 + rnorm(length(df$LB),
mean=m, sd=std),my_y = 0 + rnorm(length(df$LB), mean=m, sd=std))
# LB Variation
print(pltlb <- ggplot(lbdf, xlab = F, aes(x=(my_x), y=my_y)) +
geom_line(col="grey51",linemitre=1) +
geom_smooth(method=lm , color="blue", lty=3, fill="light blue", se=T) +
labs(x=NULL, y="BPM", title="FHR LB Variation\nIn Relation To The Mean")+
theme_ipsum())
upr2=m+(std*2)
lwr2=m-(std*2)
# Plot LB distribution boundaries
plot.new()
plot(df$LB, type="l", col="grey51", ylab="LB", main="1 & 2 Standard Deviations")
abline(h = m, col = "blue")
abline(h = upr, col = "orange", lty=2)
abline(h = lwr, col = "orange", lty=2)
abline(h = upr2, col = "red", lty=2)
abline(h = lwr2, col = "red", lty=2)
text(-65,134, "mean:133.30", col = "blue", adj = c(0, -.1))
text(-65,upr, round(upr, 2), col = "black", adj = c(0, -.1))
text(-65,lwr, round(lwr, 2), col = "black", adj = c(0, -.1))
text(-65,upr2, round(upr2, 2), col = "black", adj = c(0, -.1))
text(-65,lwr2, round(lwr2, 2), col = "black", adj = c(0, -.1))
# LB Observations higher than 2-s.d.
lba<-(sum(df$LB >152.99)) #39
# LB Observations lower than 2-s.d.
lbb<-(sum(df$LB <113.62)) #44
lba+lbb #=83 obs outside of 2-s.d.
sum(between(df$LB, 113.62, 152.99))/nrow(df) # of obs within 2-s.d.
# b. Exclude non-original measurements, rename targeted values
df[12:22] <- NULL
df$NSP<-as.numeric(df$NSP)
df$NSP<-factor(df$NSP, levels= 1:3, labels = c("Normal","Suspect", "Pathologic"))
# df$CLASS<-as.numeric(df$CLASS)
# df$CLASS<-factor(df$CLASS, levels=1:10, labels= c('A', 'B', 'C', 'D', 'SH', 'AD', 'DE', 'LD', 'FS', 'SP'))
# Visualization of original NSP
plot(df$NSP, main="Original NSP Distribution",
xlab="Fetal State Classification",
ylab="Frequency", col=c(3, 7, 2))
text(df$NSP, labels=as.character(tabulate(df$NSP)), adj=3, pos=3)
summary(df)
#5. Split the data into a training and test set
set.seed(1234)
ind <- sample(2, nrow(df), replace = T, prob = c(0.70, 0.30))
train.data <- df[ind == 1, ]
test.data <- df[ind == 2, ]
#6. Run the method on a training data
myFormula<-NSP~.
model <- ctree(myFormula, data = train.data)
#7. output the tree structure
print(model)
#8. visualize the tree
# plot(model, main="Cardiotocography Data\n Conditional Inference Tree\n'Extended'",
#       type="simple",ep_args = list(justmin = 8), drop_terminal = F,
#      gp = gpar(fontsize = 9), margins = c(4,4, 4, 4))
plot(model, type="extended", ep_args = list(justmin =8), drop_terminal=F, tnex=1.5,
gp=gpar(fontsize = 8, col="dark blue"),
inner_panel = node_inner(model, fill=c("light grey","cyan"), pval=T),
terminal_panel=node_barplot(model, fill=c(3,7,2), beside=T, ymax=1, rot = 75,
just = c(.95,.5), ylines=T, widths = 2, gap=0.05, reverse=F, id=T),
margins = c(5,3, 4, 3),
main ="Cardiotocography Data\n Conditional Inference Tree\n'Extended'")
#9. Confusion matrix
table(predict(model), train.data$NSP, dnn=c("PREDICTED", "ACTUAL"))
# predicted classification accuracy with training data
sum(predict(model) == train.data$NSP)/length(train.data$NSP)
prop.table(table(predict(model), train.data$NSP, dnn=c("PREDICTED", "ACTUAL")))
#10. Evaluate the model on a test data
model2 <- ctree(myFormula, data = test.data)
print(model2)
# plot(model2, main="Cardiotocography Data\n Simple Conditional Inference Tree\nby ocardec",
#      type="simple",ep_args = list(justmin = 10), drop_terminal = F, gp = gpar(fontsize = 12))
plot(model2, ep_args = list(justmin = 10), type="extended", drop_terminal = T,
tnex=2, gp= gpar(fontsize = 8, col="dark blue"),
inner_panel = node_inner (model2, fill=c("lightgrey","yellow"), pval=TRUE, id=TRUE),
terminal_panel=node_barplot(model2, col="black", fill=c(3,7,2, 0.3), beside=TRUE,
ymax=1, rot = 90, just = c("right", "top"), ylines=T,
widths=1, gap=0.1, reverse=FALSE, id=TRUE), margins = c(5, 3, 4, 2),
main="Cardiotocography Data\n Extended Conditional Inference Tree\nby ocardec")
# Confusion matrix and stats
testPred2 <- predict(model2, newdata = test.data, method="NSP")
confusionMatrix(testPred2, test.data$NSP)
